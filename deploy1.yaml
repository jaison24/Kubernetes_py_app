apiVersion: apps/v1
kind: StatefulSet
metadata:
name: node-wireguard
namespace: auth
spec:
serviceName: "node-wireguard"
replicas: 2 # Updated for 2 replicas
selector:
matchLabels:
app: node-wireguard
template:
metadata:
labels:
app: node-wireguard
spec:
serviceAccountName: jenkins
initContainers:
- name: wireguard-setup
image: ubuntu:latest
command:
- /bin/bash
- -c
- |
# Install necessary packages
apt-get update && apt-get install -y \
wireguard \
wireguard-tools \
iproute2 \
iptables \
iputils-ping \
curl \
&& apt-get clean && rm -rf /var/lib/apt/lists/*

# Generate WireGuard private and public keys
PRIVATE_KEY=$(wg genkey)
PUBLIC_KEY=$(echo "$PRIVATE_KEY" | wg pubkey)

# Extract pod index from pod name (e.g., node-wireguard-0 or node-wireguard-1)
POD_NAME=$(hostname)
POD_INDEX=$(echo "$POD_NAME" | grep -oE '[0-9]+$')
LISTEN_PORT=$((51820 + POD_INDEX)) # Dynamically set port 51820, 51821
PEER_IP="10.8.0.$((1 + POD_INDEX))"

# Get the peer's public key (inject this dynamically, for now using a placeholder)
PEER_PUBLIC_KEY=$(cat /etc/wireguard/peer-publickey.txt) # Replace with dynamic injection if needed

# Save the private and public keys to the container
mkdir -p /etc/wireguard
echo "$PRIVATE_KEY" > /etc/wireguard/privatekey
echo "$PUBLIC_KEY" > /etc/wireguard/publickey

# Write the WireGuard configuration
cat <<EOF > /etc/wireguard/wg0.conf
[Interface]
PrivateKey=$PRIVATE_KEY
Address=10.8.0.$((1 + POD_INDEX))/24
ListenPort=$LISTEN_PORT
SaveConfig=true
EOF

# Enable IP forwarding inside the container for WireGuard to work
echo "1" > /proc/sys/net/ipv4/ip_forward
sysctl -p || true # Ignore errors from sysctl due to container isolation

# Set up iptables for NAT and forwarding (No UFW, using iptables directly)
iptables -A FORWARD -i wg0 -j ACCEPT
iptables -A FORWARD -o wg0 -j ACCEPT
iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE
iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE

# Bring up the WireGuard interface
wg-quick up wg0 || echo "WireGuard setup failed."
securityContext:
privileged: true # Required to run iptables and WireGuard commands
capabilities:
add:
- NET_ADMIN
volumeMounts:
- name: wireguard-config
mountPath: /etc/wireguard
containers:
- name: node-wireguard
image: bhargavram458/node-wireguard:latest
ports:
- containerPort: 4000 # Node.js app
protocol: TCP
- containerPort: 51820 # WireGuard UDP port for pod 0
protocol: UDP
- containerPort: 51821 # WireGuard UDP port for pod 1
protocol: UDP
env:
- name: NODE_ENV
value: production
- name: POD_NAME
valueFrom:
fieldRef:
fieldPath: metadata.name
securityContext:
capabilities:
add:
- NET_ADMIN # Allow to manage networking inside the container
volumeMounts:
- name: wireguard-config
mountPath: /etc/wireguard
volumes:
- name: wireguard-config
emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
name: node-wireguard-tcp
namespace: auth
annotations:
service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
type: LoadBalancer
selector:
app: node-wireguard
ports:
- name: tcp-traffic
protocol: TCP
port: 4000
targetPort: 4000

---

apiVersion: v1
kind: Service
metadata:
name: node-wireguard-udp
namespace: auth
spec:
type: NodePort # Changed to NodePort for exposing WireGuard ports
selector:
app: node-wireguard
ports:
- name: udp-traffic-51820
protocol: UDP
port: 51820
targetPort: 51820
nodePort: 30002 # NodePort for pod 0
- name: udp-traffic-51821
protocol: UDP
port: 51821
targetPort: 51821
nodePort: 30003 # NodePort for pod 1
